#!/bin/bash
set -eo pipefail

source ./test-networking/common


do_nic_firmware_check () {
    local nodes=($(get_pod_by_label openshift-ovn-kubernetes app=ovnkube-node))
    local first_node_fw=$(oc exec -n openshift-ovn-kubernetes -c ovnkube-node ${nodes[0]} -- bash -c 'ethtool -i $(ovs-vsctl list-ports br-ex|grep -v patch-br-ex) | grep firmware-version | cut -d ":" -f2 | sed "s/^ *//g"')
    local first_node_worker=$(oc get -n openshift-ovn-kubernetes pod ${nodes[0]} -o jsonpath={.spec.nodeName})
    for n in ${nodes[@]:1} ; do
        n_fw=$(oc exec -n openshift-ovn-kubernetes -c ovnkube-node ${n} -- bash -c 'ethtool -i $(ovs-vsctl list-ports br-ex|grep -v patch-br-ex) | grep firmware-version | cut -d ":" -f2 | sed "s/^ *//g"')
        n_worker=$(oc get -n openshift-ovn-kubernetes pod ${n} -o jsonpath={.spec.nodeName})
        if [[ ${n_fw} == ${first_node_fw} ]]; then
            echo "SUCCESS: "Node ${n_worker}" has firmware version "${n_fw}" just like node ${first_node_worker}"
	else
            echo "FAILURE: "Node ${n_worker}" has firmware version "${n_fw}" unlike node ${first_node_worker}, which is ${first_node_fw}"
	fi
    done
}

description() {
  echo "Check the firmware of Openshift OVN cluster nodes match"
}

help() {
    echo "
This script checks the firmware of Openshift OVN cluster nodes match.
If there is a NIC firmware mismatch, it will show the firmware version mismatch.

Usage: $USAGE

Examples:
  $USAGE

  oc adm must-gather $NETWORK_TOOLS_IMAGE -- $USAGE
"
}

main () {
    logdir=$(prepare_logdir openshift-ovn-nic-firmware)
    do_nic_firmware_check |& tee $logdir/log
}

case "${1:-}" in
  description) description ;;
  -h|--help) help ;;
  *) main "$@" ;;
esac
